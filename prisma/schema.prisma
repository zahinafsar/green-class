// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../types/prisma-zod-schemas"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      Role       @default(STUDENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sessions  Session[]
  messages  Message[]
  student   Student?
  faculty   Faculty?
  userRoom  UserRoom[]
}

model Student {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentId String   @unique
  fullName  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  facultyId String   @unique
  fullName  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Section {
  id         String   @id @default(uuid())
  batch      String
  program    String
  subject    String
  section    String
  courseCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String   @unique
}

model Room {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  messages  Message[]
  section   Section?
  userRoom  UserRoom[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model UserRoom {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  FACULTY
}
